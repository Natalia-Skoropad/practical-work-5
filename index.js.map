{"version":3,"file":"index.js","sources":["../src/js/refs.js","../src/js/render-tasks.js","../src/js/hendlers.js","../src/main.js"],"sourcesContent":["export const refs = {\n  taskForm: document.querySelector('.header-form'),\n  taskList: document.querySelector('.tasks-list'),\n};\n","import { refs } from './refs';\n\nexport function renderTasks(tasks) {\n  const markup = tasks\n    .map(\n      ({ taskName, taskDescription, taskID }) =>\n        `<li class=\"task-list-item\">\n            <button class=\"task-list-item-btn\" data-id=${taskID}>Delete</button>\n            <h3>${taskName}</h3>\n            <p>${taskDescription}</p>\n        </li>`\n    )\n    .join('');\n\n  refs.taskList.innerHTML = markup;\n}\n","import iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\nimport { nanoid } from 'nanoid';\nimport { renderTasks } from './render-tasks';\n/* import { getFormLocalStorage } from './local-storage-api';\nimport { STORAGE_KEYS } from './constants'; \n\nlet tasks = getFormLocalStorage(STORAGE_KEYS.TASKS) || []; */\n\nlet tasks = [];\n\nfunction loadTasks() {\n  const storedTasks = localStorage.getItem('tasks');\n\n  if (storedTasks) {\n    tasks = JSON.parse(storedTasks);\n    renderTasks(tasks);\n  }\n}\n\nfunction saveTasks() {\n  localStorage.setItem('tasks', JSON.stringify(tasks));\n}\n\nexport function onTaskFormSubmit(event) {\n  event.preventDefault();\n  const { taskName, taskDescription } = event.target.elements;\n  const taskNameValue = taskName.value.trim();\n  const taskDescriptionValue = taskDescription.value.trim();\n\n  if (!taskNameValue || !taskDescriptionValue) {\n    iziToast.error({\n      title: 'Error',\n      message: `Fields must be filled in`,\n      position: 'topRight',\n      timeout: 5000,\n    });\n    return;\n  }\n\n  const task = {\n    taskID: nanoid(),\n    taskName: taskNameValue,\n    taskDescription: taskDescriptionValue,\n  };\n\n  tasks.push(task);\n  saveTasks();\n  renderTasks(tasks);\n  event.target.reset();\n}\n\nexport function onDeleteTask(event) {\n  if (event.target.nodeName !== 'BUTTON') {\n    return;\n  }\n\n  const taskID = event.target.dataset.id;\n  tasks = tasks.filter(task => task.taskID !== taskID);\n  saveTasks();\n  renderTasks(tasks);\n}\n\nloadTasks();\n","import { onDeleteTask, onTaskFormSubmit } from './js/hendlers';\nimport { refs } from './js/refs';\n\nrefs.taskForm.addEventListener('submit', onTaskFormSubmit);\nrefs.taskList.addEventListener('click', onDeleteTask);\n\nconst themeToggle = document.querySelector('.theme-toggle-button');\nconst content = document.querySelector('.theme-dark');\nconst themeKey = 'theme';\n\nfunction applyTheme(theme) {\n  if (theme === 'dark') {\n    content.classList.add('theme-dark');\n    content.classList.remove('theme-light');\n  } else {\n    content.classList.add('theme-light');\n    content.classList.remove('theme-dark');\n  }\n}\n\nconst savedTheme = localStorage.getItem(themeKey);\n\nif (savedTheme) {\n  applyTheme(savedTheme);\n} else {\n  // Якщо тема не збережена, застосовуємо світлу тему за замовчуванням\n  applyTheme('light');\n}\n\n// Обробник події для кнопки перемикання теми\nthemeToggle.addEventListener('click', () => {\n  const currentTheme = localStorage.getItem(themeKey) || 'light';\n  const newTheme = currentTheme === 'light' ? 'dark' : 'light';\n\n  applyTheme(newTheme);\n  localStorage.setItem(themeKey, newTheme);\n});\n\n/*\n  Створи список справ.\n  На сторінці є два інпути які має вводиться назва і текст задачі.\n  Після натискання на кнопку \"Add\" завдання додається до списку #task-list.\n\n  У кожної картки має бути кнопка \"Delete\", щоб можна було\n  прибрати завдання зі списку.\n  Список із завданнями має бути доступним після перезавантаження сторінки.\n\n  Розмітка картки задачі\n  <li class=\"task-list-item\">\n      <button class=\"task-list-item-btn\">Delete</button>\n      <h3>Заголовок</h3>\n      <p>Текст</p>\n  </li>\n*/\n"],"names":["refs","renderTasks","tasks","markup","taskName","taskDescription","taskID","loadTasks","storedTasks","saveTasks","onTaskFormSubmit","event","taskNameValue","taskDescriptionValue","iziToast","task","nanoid","onDeleteTask","themeToggle","content","themeKey","applyTheme","theme","savedTheme","newTheme"],"mappings":"6vBAAO,MAAMA,EAAO,CAClB,SAAU,SAAS,cAAc,cAAc,EAC/C,SAAU,SAAS,cAAc,aAAa,CAChD,ECDO,SAASC,EAAYC,EAAO,CACjC,MAAMC,EAASD,EACZ,IACC,CAAC,CAAE,SAAAE,EAAU,gBAAAC,EAAiB,OAAAC,CAAM,IAClC;AAAA,yDACiDA,CAAM;AAAA,kBAC7CF,CAAQ;AAAA,iBACTC,CAAe;AAAA,cAEhC,EACK,KAAK,EAAE,EAEVL,EAAK,SAAS,UAAYG,CAC5B,CCNA,IAAID,EAAQ,CAAA,EAEZ,SAASK,GAAY,CACnB,MAAMC,EAAc,aAAa,QAAQ,OAAO,EAE5CA,IACFN,EAAQ,KAAK,MAAMM,CAAW,EAC9BP,EAAYC,CAAK,EAErB,CAEA,SAASO,GAAY,CACnB,aAAa,QAAQ,QAAS,KAAK,UAAUP,CAAK,CAAC,CACrD,CAEO,SAASQ,EAAiBC,EAAO,CACtCA,EAAM,eAAc,EACpB,KAAM,CAAE,SAAAP,EAAU,gBAAAC,CAAe,EAAKM,EAAM,OAAO,SAC7CC,EAAgBR,EAAS,MAAM,KAAI,EACnCS,EAAuBR,EAAgB,MAAM,KAAI,EAEvD,GAAI,CAACO,GAAiB,CAACC,EAAsB,CAC3CC,EAAS,MAAM,CACb,MAAO,QACP,QAAS,2BACT,SAAU,WACV,QAAS,GACf,CAAK,EACD,MACF,CAEA,MAAMC,EAAO,CACX,OAAQC,EAAM,EACd,SAAUJ,EACV,gBAAiBC,CACrB,EAEEX,EAAM,KAAKa,CAAI,EACfN,EAAS,EACTR,EAAYC,CAAK,EACjBS,EAAM,OAAO,MAAK,CACpB,CAEO,SAASM,EAAaN,EAAO,CAClC,GAAIA,EAAM,OAAO,WAAa,SAC5B,OAGF,MAAML,EAASK,EAAM,OAAO,QAAQ,GACpCT,EAAQA,EAAM,OAAOa,GAAQA,EAAK,SAAWT,CAAM,EACnDG,EAAS,EACTR,EAAYC,CAAK,CACnB,CAEAK,EAAS,EC5DTP,EAAK,SAAS,iBAAiB,SAAUU,CAAgB,EACzDV,EAAK,SAAS,iBAAiB,QAASiB,CAAY,EAEpD,MAAMC,EAAc,SAAS,cAAc,sBAAsB,EAC3DC,EAAU,SAAS,cAAc,aAAa,EAC9CC,EAAW,QAEjB,SAASC,EAAWC,EAAO,CACrBA,IAAU,QACZH,EAAQ,UAAU,IAAI,YAAY,EAClCA,EAAQ,UAAU,OAAO,aAAa,IAEtCA,EAAQ,UAAU,IAAI,aAAa,EACnCA,EAAQ,UAAU,OAAO,YAAY,EAEzC,CAEA,MAAMI,EAAa,aAAa,QAAQH,CAAQ,EAG9CC,EADEE,GAIS,OAHU,EAOvBL,EAAY,iBAAiB,QAAS,IAAM,CAE1C,MAAMM,GADe,aAAa,QAAQJ,CAAQ,GAAK,WACrB,QAAU,OAAS,QAErDC,EAAWG,CAAQ,EACnB,aAAa,QAAQJ,EAAUI,CAAQ,CACzC,CAAC"}